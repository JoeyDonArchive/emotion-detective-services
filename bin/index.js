#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("@aws-cdk/core");
const site_resources_1 = require("../lib/site-resources");
const video_storage_1 = require("../lib/video-storage");
const stepfunction_1 = require("../lib/stepfunction");
const eventbridge_1 = require("../lib/eventbridge");
const api_1 = require("../lib/api");
const layer_1 = require("../lib/layer");
const app = new cdk.App();
const appName = "emotion-detective";
const prefix = `${app.node.tryGetContext("stage")}-${appName}`;
const lambdaLayerEntity = new layer_1.default(app, `${prefix}-layer`, {});
const videoStorageStackEntity = new video_storage_1.default(app, `${prefix}-video-storage`, {
    prefix: prefix,
    layer: lambdaLayerEntity.layer,
});
const siteResourcesStackEntity = new site_resources_1.default(app, `${prefix}-site-resources`, {
    prefix: prefix,
});
const stepfunctionStackEntity = new stepfunction_1.default(app, `${prefix}-stepfunction`, {
    prefix: prefix,
    rawS3Bucket: videoStorageStackEntity.rawS3Bucket,
    formattedS3Bucket: videoStorageStackEntity.formattedS3Bucket,
    jsonResultS3Bucket: videoStorageStackEntity.jsonResultS3Bucket,
    jobsResultS3Bucket: videoStorageStackEntity.jobsResultS3Bucket,
    layer: lambdaLayerEntity.layer,
});
const apiStackEntity = new api_1.default(app, `${prefix}-api`, {
    prefix: prefix,
    stateMachineArn: stepfunctionStackEntity.stateMachineArn,
});
const eventbridgeStackEntity = new eventbridge_1.default(app, `${prefix}-eventbridge`, {
    prefix: prefix,
    rawS3Bucket: videoStorageStackEntity.rawS3Bucket,
    formattedS3Bucket: videoStorageStackEntity.formattedS3Bucket,
    jsonResultS3Bucket: videoStorageStackEntity.jsonResultS3Bucket,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx1Q0FBcUM7QUFDckMscUNBQXFDO0FBQ3JDLDBEQUF1RDtBQUN2RCx3REFBcUQ7QUFDckQsc0RBQXFEO0FBQ3JELG9EQUFrRDtBQUNsRCxvQ0FBa0M7QUFDbEMsd0NBQXVDO0FBRXZDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzFCLE1BQU0sT0FBTyxHQUFHLG1CQUFtQixDQUFDO0FBQ3BDLE1BQU0sTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksT0FBTyxFQUFFLENBQUM7QUFFL0QsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGVBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUV0RSxNQUFNLHVCQUF1QixHQUFHLElBQUksdUJBQWlCLENBQ25ELEdBQUcsRUFDSCxHQUFHLE1BQU0sZ0JBQWdCLEVBQ3pCO0lBQ0UsTUFBTSxFQUFFLE1BQU07SUFDZCxLQUFLLEVBQUUsaUJBQWlCLENBQUMsS0FBSztDQUMvQixDQUNGLENBQUM7QUFFRixNQUFNLHdCQUF3QixHQUFHLElBQUksd0JBQWtCLENBQ3JELEdBQUcsRUFDSCxHQUFHLE1BQU0saUJBQWlCLEVBQzFCO0lBQ0UsTUFBTSxFQUFFLE1BQU07Q0FDZixDQUNGLENBQUM7QUFFRixNQUFNLHVCQUF1QixHQUFHLElBQUksc0JBQWtCLENBQ3BELEdBQUcsRUFDSCxHQUFHLE1BQU0sZUFBZSxFQUN4QjtJQUNFLE1BQU0sRUFBRSxNQUFNO0lBQ2QsV0FBVyxFQUFFLHVCQUF1QixDQUFDLFdBQVc7SUFDaEQsaUJBQWlCLEVBQUUsdUJBQXVCLENBQUMsaUJBQWlCO0lBQzVELGtCQUFrQixFQUFFLHVCQUF1QixDQUFDLGtCQUFrQjtJQUM5RCxrQkFBa0IsRUFBRSx1QkFBdUIsQ0FBQyxrQkFBa0I7SUFDOUQsS0FBSyxFQUFFLGlCQUFpQixDQUFDLEtBQUs7Q0FDL0IsQ0FDRixDQUFDO0FBRUYsTUFBTSxjQUFjLEdBQUcsSUFBSSxhQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxNQUFNLEVBQUU7SUFDeEQsTUFBTSxFQUFFLE1BQU07SUFDZCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsZUFBZTtDQUN6RCxDQUFDLENBQUM7QUFFSCxNQUFNLHNCQUFzQixHQUFHLElBQUkscUJBQWdCLENBQ2pELEdBQUcsRUFDSCxHQUFHLE1BQU0sY0FBYyxFQUN2QjtJQUNFLE1BQU0sRUFBRSxNQUFNO0lBQ2QsV0FBVyxFQUFFLHVCQUF1QixDQUFDLFdBQVc7SUFDaEQsaUJBQWlCLEVBQUUsdUJBQXVCLENBQUMsaUJBQWlCO0lBQzVELGtCQUFrQixFQUFFLHVCQUF1QixDQUFDLGtCQUFrQjtDQUMvRCxDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgXCJzb3VyY2UtbWFwLXN1cHBvcnQvcmVnaXN0ZXJcIjtcbmltcG9ydCAqIGFzIGNkayBmcm9tIFwiQGF3cy1jZGsvY29yZVwiO1xuaW1wb3J0IHNpdGVSZXNvdXJjZXNTdGFjayBmcm9tIFwiLi4vbGliL3NpdGUtcmVzb3VyY2VzXCI7XG5pbXBvcnQgdmlkZW9TdG9yYWdlU3RhY2sgZnJvbSBcIi4uL2xpYi92aWRlby1zdG9yYWdlXCI7XG5pbXBvcnQgc3RlcGZ1bmN0aW9uc1N0YWNrIGZyb20gXCIuLi9saWIvc3RlcGZ1bmN0aW9uXCI7XG5pbXBvcnQgZXZlbnRicmlkZ2VTdGFjayBmcm9tIFwiLi4vbGliL2V2ZW50YnJpZGdlXCI7XG5pbXBvcnQgYXBpU3RhY2sgZnJvbSBcIi4uL2xpYi9hcGlcIjtcbmltcG9ydCBsYW1iZGFMYXllciBmcm9tIFwiLi4vbGliL2xheWVyXCI7XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5jb25zdCBhcHBOYW1lID0gXCJlbW90aW9uLWRldGVjdGl2ZVwiO1xuY29uc3QgcHJlZml4ID0gYCR7YXBwLm5vZGUudHJ5R2V0Q29udGV4dChcInN0YWdlXCIpfS0ke2FwcE5hbWV9YDtcblxuY29uc3QgbGFtYmRhTGF5ZXJFbnRpdHkgPSBuZXcgbGFtYmRhTGF5ZXIoYXBwLCBgJHtwcmVmaXh9LWxheWVyYCwge30pO1xuXG5jb25zdCB2aWRlb1N0b3JhZ2VTdGFja0VudGl0eSA9IG5ldyB2aWRlb1N0b3JhZ2VTdGFjayhcbiAgYXBwLFxuICBgJHtwcmVmaXh9LXZpZGVvLXN0b3JhZ2VgLFxuICB7XG4gICAgcHJlZml4OiBwcmVmaXgsXG4gICAgbGF5ZXI6IGxhbWJkYUxheWVyRW50aXR5LmxheWVyLFxuICB9XG4pO1xuXG5jb25zdCBzaXRlUmVzb3VyY2VzU3RhY2tFbnRpdHkgPSBuZXcgc2l0ZVJlc291cmNlc1N0YWNrKFxuICBhcHAsXG4gIGAke3ByZWZpeH0tc2l0ZS1yZXNvdXJjZXNgLFxuICB7XG4gICAgcHJlZml4OiBwcmVmaXgsXG4gIH1cbik7XG5cbmNvbnN0IHN0ZXBmdW5jdGlvblN0YWNrRW50aXR5ID0gbmV3IHN0ZXBmdW5jdGlvbnNTdGFjayhcbiAgYXBwLFxuICBgJHtwcmVmaXh9LXN0ZXBmdW5jdGlvbmAsXG4gIHtcbiAgICBwcmVmaXg6IHByZWZpeCxcbiAgICByYXdTM0J1Y2tldDogdmlkZW9TdG9yYWdlU3RhY2tFbnRpdHkucmF3UzNCdWNrZXQsXG4gICAgZm9ybWF0dGVkUzNCdWNrZXQ6IHZpZGVvU3RvcmFnZVN0YWNrRW50aXR5LmZvcm1hdHRlZFMzQnVja2V0LFxuICAgIGpzb25SZXN1bHRTM0J1Y2tldDogdmlkZW9TdG9yYWdlU3RhY2tFbnRpdHkuanNvblJlc3VsdFMzQnVja2V0LFxuICAgIGpvYnNSZXN1bHRTM0J1Y2tldDogdmlkZW9TdG9yYWdlU3RhY2tFbnRpdHkuam9ic1Jlc3VsdFMzQnVja2V0LFxuICAgIGxheWVyOiBsYW1iZGFMYXllckVudGl0eS5sYXllcixcbiAgfVxuKTtcblxuY29uc3QgYXBpU3RhY2tFbnRpdHkgPSBuZXcgYXBpU3RhY2soYXBwLCBgJHtwcmVmaXh9LWFwaWAsIHtcbiAgcHJlZml4OiBwcmVmaXgsXG4gIHN0YXRlTWFjaGluZUFybjogc3RlcGZ1bmN0aW9uU3RhY2tFbnRpdHkuc3RhdGVNYWNoaW5lQXJuLFxufSk7XG5cbmNvbnN0IGV2ZW50YnJpZGdlU3RhY2tFbnRpdHkgPSBuZXcgZXZlbnRicmlkZ2VTdGFjayhcbiAgYXBwLFxuICBgJHtwcmVmaXh9LWV2ZW50YnJpZGdlYCxcbiAge1xuICAgIHByZWZpeDogcHJlZml4LFxuICAgIHJhd1MzQnVja2V0OiB2aWRlb1N0b3JhZ2VTdGFja0VudGl0eS5yYXdTM0J1Y2tldCxcbiAgICBmb3JtYXR0ZWRTM0J1Y2tldDogdmlkZW9TdG9yYWdlU3RhY2tFbnRpdHkuZm9ybWF0dGVkUzNCdWNrZXQsXG4gICAganNvblJlc3VsdFMzQnVja2V0OiB2aWRlb1N0b3JhZ2VTdGFja0VudGl0eS5qc29uUmVzdWx0UzNCdWNrZXQsXG4gIH1cbik7XG4iXX0=